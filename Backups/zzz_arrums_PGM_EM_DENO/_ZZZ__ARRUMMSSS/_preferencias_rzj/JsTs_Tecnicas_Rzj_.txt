FALAR COM O PC


dependencias:
nao usar dependencias nao dependa de terceiros, a longo prazo pods ficar na mao, faça seus proprios.
excessao, se realmente achar viavel use somente dependencia oficial do dono da linguagem no caso de golang use somente dependencia oficial do time do google.

---

// USANDO FABRICA DE OBJETOS - MAIS QUE UM OBJETO NA MESMA FABRICA

const makeSut = () => {
  const sut = { foo: 'sut', bar: 'sut' }
  const stub = { foo: 'stub', bar: 'stub' }
  return {
    sut, stub
  }
}

const { sut } = makeSut()
const { stub } = makeSut()

console.log(sut)
console.log(stub)

//  ----

/*
# CRIACIONAL ENTIDADES COM FACTORY FUNCTIONS
- Object.create() >> adiciona um obj ja existente com prototype de um.novo objeto  é a herancaBoa do js.

- entao criamos obj com funcao para inserirmos no proto de objetos Pai.

factoryFunction
importancia: é a tecnica preferida para criar entidades e inserir metodos no seu prototype dna.

propriedades_metodos:
o this é o objeto.campoQue vai criar
importante no final retorne somente este objeto que estara carregando todos campos/atributos criados..nunca retorne um outro objeto transformado sénao nao entra o que inserir no prototype ...dará falsa impressao que esta correto.

recursos: a arowFunction faz o this ser o objeto que quisermos estando dentro do escopo da funcaoArow...entao nosso this podemos criar o objeto que sera nosso this dentro do escopo.
*/

// exemplo:

const objFN1 = {
  metodo1() {
    return `Metodo1 para ${this.nome}`
  },
  metodo2() {
    return `Metodo2 para ${this.nome} com idade ${this.idade}`
  }
}

const createUser = ({ nome, idade}) => {
 const user = Object.create( objFN1 )
  user.nome = nome
  user.idade = idade  
  
  return user
}

const reinaldo = { nome: 'Rei', idade: 45 }
const renata = { nome: 'Renata', idade: 40 }

const instancia1 = createUser(reinaldo)
const instancia2 = createUser(renata)

// VER METODOS DO PROTO NAS INSTANCIAS
console.log( instancia1.metodo1() )
console.log( instancia2.metodo2() )

// TESTER SE TENS O MESMO PROTO
// Se usei um Objeto pra fazer algo..quando for recuperar pra testar uso o objeto tbm pra testar com o isPrototypeOf()
// sintaxe: OBJETOdasFUNCOES isPrototypeOf ( INSTANCIA )

console.log( 
  objFN1.isPrototypeOf(instancia1) && 
  objFN1.isPrototypeOf(instancia2)) // SE RESPONDER "true" ESTA OK.

// FIM ------ METODOS IN PROTO --------


PREFERENCIAS RZJ  -------------

funcoes : preferir guardar em referencia utilizando arow function...
beneficio: no uso ou tests nao precisa executar com () .. é só referenciar.
...

captura_inteira_ou_partes:
quando vai guardar/capturar o resultado de uma expressao ou valor... a esquerda diga " O QUE EU QUERO DAQUI " se for tudo poem uma var pra capturar tudo, se for partes, propriedades "LÁ DE DENTRO" envolva em { chaves a prop desejada em extrair } ...ex: { id } = deValorOuExpressao

...
entidades criar com a tecnica factoryFunction  "funcao fabrica"
beneficio: nao precisa das palavras chaves de classe, vonstructor, this, new etc...
---

----------------------------------

# conversoes 

// converter string em numero
// modo 1
const str1 = '10'
const res1 = Number(str1)
console.log( typeof res1 )

// modo 2
const str2 = Number( '10' )
const res2 = Number(str2)
console.log( typeof res2 )

// OBJETOS
/*
# USAR VALOR DE UMA PROP DENTRO DO OBJETO:

SÓ DENTRO DE METODO E SEU RESULTADO NA INVOCACAO DO METO NO USO DA INSTANCIA

*/

const obj1 = {
  nome: 'Rei',
  sobrenome: 'Zacharias',
  
  nomeCompleto() {
    return `${this.nome} ${this.sobrenome}` 
  }
} 

console.log( obj1.nomeCompleto() )

// ------------‐----------

BOM PARA TESTS

// verificar se instancia é instancia de um Construtor Classe | Function | Object
objeto instanceof Nome da Classe | Function | Object

// ---------------------

// UPDATE_BY_ID :: EDITAR LISTA DE OBJETOS POR ID

const lista = [
  { id: 1, nome: 'nadaMudou', idade: 44 },
  { id: 2, nome: 'Dois', idade: 64 },
  { id: 3, nome: 'Tres', idade: 84 }, 
]

const dataRequest = { nome: 'Editado11', idade: 4000 }

const updateById = (id, newData) => {
  const cap = lista.find(d => d.id === id )
  // POSSO REATRIBUIR OBJETO INTEIRO POR OBJ COM OBJECT.ASSIGN
  const reassign = Object.assign(cap, newData)
  
  // OU POSSO REATRIBUIR CAMPO POR CAMPO.
  // const nome = cap.nome = data.nome
  // const idade = cap.idade = data.idade
  // const response = { id, nome, idade }

  return reassign
}

updateById (1, dataRequest)

console.log( lista )

// ----------------------------

/*
  * REMOVER DELETAR ITEM OBJETO DE ARRAY POR ID
*/

const lista = [
  { id: 1, nome: 'nadaMudou', idade: 97 },
  { id: 2, nome: 'Dois', idade: 98 },
  { id: 3, nome: 'Tres', idade: 99 }, 
]

const useRemoveObjList = (list, id) => {
  let operation = false  
  list.forEach( (item, index, object) => {
  if (item.id === id) {     
    object.splice(index, 1)
    operation = true
  } 
}, [])
  return operation
}

const removeId = ({ id }) => {   
  const removed = useRemoveObjList(lista, id)
  return (removed) ? true : false
}

console.log(removeId( { id: 11 } ))
console.log( lista )

// ----------

/*
* SINTAXE REST_PARAM JS
1° param :: é o dadoOriginal
2° param :: é o dafo novo que sera criado baseado nobprimeiro param

- se o 1° param tiver 3 pontos vai copiar  os campos e disponibilizar pro 2° a ser criado.
- se nao tiver 3 pontos vai remover o que esta sendo definido non1° param pro 2° usar

*/

// -----------

/*
REMOVER CAMPOS DE UM OBJETO com REST PARAMS

sintaxe:
const { campoRemover1, campoRemover2, ...novoObjComOResto } = objProvedor

conceito: usa a imutabilidade :: baseado no data provedor , cria um novo obj retirando o que foi passado no 1° param.

Tem que extrair do objeto recebido,

primeiro_param: primeiro param é tudo que vier antes dos (...3 pontos) pode ser varios campos separados por virgula.

segundo_param: segundo param é o que vem depois dos 3 pontos e sera o novo objeto criado sem os campos que foram tirados no 1° param.

*/

// EXEMPLO 
// CRIANDO NOVO OBJ BASEADO EM OUTRO -> REMOVENDO CAMPOS id e nome

const data = { id: 1, nome: 'um', idade: 10, casado: true }
const { id, casado, ...novoData } = data

console.log( novoData );


// -------------
# Criar ou Atualizar na mesma funcao
tutorial:  Firestore- BancoDeDados / atualizar Pet by rogerioHotmart

logica_resumo: Se o Client mandou o id vai atualizar, senao mandou vai criar.


// -‐------------

/*
* ATUALIZAR COM REST_PARAM
* conceito: 
copia tudo que esta no dadoOriginal e cria novo com tudo que veio no dadoRequest

*/

// EXEMPLO REST ATUALIZACAO

// DADOS
const dadoOriginal = { id: 1, nome: 'um', idade: 10, casado: true }

const newDadoRequest = { nome: 'newNome', casado: false }

// ATUALIZA SEM FUNCAO
const dadoAtualizado = { ...dadoOriginal, ...newDadoRequest }

// console.log( dadoAtualizado )

// --------

// EXEMPLO : ATYALIZANDO COM REST EM FUNCAO

const atualizaFNRest = (newData) => {
  return dataUpdated = { ...dadoOriginal, ...newData }
}

console.log ( atualizaFNRest ( newDadoRequest )  )

// -------------
//OBTER NOME DA FUNCAO
const func1 = () => 'Hello func1'

const expected1 = func1.name //pegar nome da funcao
const constructed = func1.constructor // pegar construtorPai

const confirmConstructor = func1.constructor === Function 

const instance = ( func1 instanceof Function )

console.log( expected1 )
console.log( constructed )
console.log( confirmConstructor )
console.log( instance  )

/*
# instanceof , traducao: instancia de..?
tipoUso: é uma pergunta.
aplicabidade: saber se objeto é instancia de um construtorPai

output: responde com um booleano.
sintaxeNarrada: objeto é instanciaDe... Construtor ex: Function, Object, MinhaClass
---
*/

// ---------

evitarNaN:
A variavel "resultado" tem que comecar com o valor ZERO , tipo let resultado = 0
como vc ta fazendo resultado += ele ta somando o undefined com alguma coisa o que resulta em NaN
...



