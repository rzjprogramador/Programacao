licoes_pgm:

construcoes:
logica: logica é o que faz sentido.

declaracao: vc mostra que o recipiente existe apresentando seu nome e tipo

atribuicao: vc bota valor dentro do recipiente existente.

instrucoes: mande o pc fazer o que ele sabe...e o que ele nao sabe ensine como faz.

saber se recipiente tem algum valor dentro, verifique se o recipiente é diferente de nulo
ex: if recipiente != null { faz

}

resultados:
o que der verdadeiro dê como resposta verdadeira.
o quer der falso ou falha avise em feedback o utilizador

utilizadores: [ args de funcao, usuario ]

---

execucao_js:

no_servidor:
Node.js é uma plataforma  para executar JS no lado do servidor, ou seja backend, 
no backend também podemos ouvir eventos, porém eventos de leitura e escrita de um arquivo ou de abertura e fechamento de conexão com banco de dados(i/o)

no_frontend:
 quem executa o código JS  são os browsers, então vc vai perceber que no front podemos ouvir eventos de click, mouseup, mousedown ...

------------

// CRIACIONAL

criar_Entidades: rzj 22/nov usar factoryFunctions tutorial: roger https://youtu.be/4APvzc9qdN8

factorysFunctions adicionar metodos no proto por herancaBoa de proto :
tutorial roger https://youtu.be/SbeTT-QdiwY

---

SINTAXES

funcaoConstrutora:
this.QUE SERA CHAVE = arg QUE VAI PREENCHER VALOR DA CHAVE NOVA

conclusao: o que tiver com this. é a declaracao da chave key...ela  ainda nao existe esta sendo declarada.

tests: no node ainda nao consigo testar o prototype.

---

significados:




---
implementacoes:

armazenamento:
o que nao quer que o servidor armazene ocupe espacos crie fora da pasta src/ 
ex: [ repositoryInMemory,  ]

organizacao_modulos_entidade :

[ modules/ entity(classe com todos cases) + cases_api ( vai receber o make e  mandar repo fazer e entregar ao endpoint) 

makers [makeEntity/ repoInUse] ]
[ providers/ repositories/ repoEntity1, ...2, 3 ]

....
test_service:
para testar o Setvice sempre pelo RepoMemory >> mockar o Mediator faca ele receber o service e salvar no optionRepoMemory.
para testar se deu certo modifique algo no service e confira se deu certo no mock.
....


criacional: 

inserir:
via_base_logica: inserir algo com operacao de soma e atribuicao.
ex: var += algo

funcao_construtora: ConstructorFunctions
criar objEntidade : posso usar FuncoesConstrutoras/ ConstrctorFunctions ||

em_classes: as chaves cria nas varsDaClasse, se precisar configura-las, transforma-las use o bloco construtor, ...e acesse as vars nos metodos.
precisar de metodo crud crie na classe,
metodos dna de prototype tbm nomeando com useMetodo.
crie um objeto make para utilizar onde precisa  objetos e metodos desta entidade.

o_que_gerar_com_classes: [
Entidades, Repositorios, 
]

---
valores_falsy:
null, undefined, false, string vazia se tiver espaco ja é truthy, zero 0 , -1, numeros negativos, NaN ...

valores_truthy: tudo  que nao é falsy

tratamento_para_falsy:
 em loops e conficionais tenho que preparar resposta de erro caso o solicitado responda com valor falsy....é o chamado tratamento de erros. 
 
----

----

TS 
tipagem: 

tipagem sem neura, use só onde precisar , onde nao tao necessario seja glexivel igual o js ..use any ou unknow.

geralmente na forma de funcao pura o tipo que recebemos é o tipo que devolvemos.

nao tipar Service ... ou funcoes de transformacao que recebem algo e devolvem algo maior ... só tipe se conseguir controlar o que é este algo maior.

- sempre que vc atribuir colocar o sinal de atribuicao o ys bai inferir o tipo .
- 

tipagem_estruturada : é como um Tdd de tipagem vc escreve a funcao como molde de tipos onde seriam os valores.

aula Structural type  Tipagem Estruturada ideal para tipar funcao 285 ts js byMiranda udemy.

tipagem pelo tipo dos args o ts ja infere qual sera o retorno da funcao...se a intencao é retornar esyrutura diferente da recebida tipe a funcao.

---

programacao_funcional:
  programacao_funcional precisa de imutabilidade.

imutabilidade:
se uma constante comeca com um valor ela tera este valor ate o fim da app.
se quiser muda-lo vc cria outro e muda no momento da criacao.

bugs: geralmente moram no estado mutavelda app ex: efeitosColaterais.

---

# USANDO CLASSE PARA CRIAR OBJ ENTIDADE EM JS_TS:

- Evite usar params no constructor
- variavelTopoDaClasse: é acessada pelo this.
- variavelBlocoConstrutor tem prioridade sobre a varDaClasse. ... serve para manipular a da classe e dos params se usar.
- 
- nos metodos com this. vc vai acessar a var da classe na ordem se existerem:
- 
- ordemProcedenvia vars:
- 1° vars blocoConstrutor .. se tiver definida.
- 2° vars topoDaClasse ... se tiver definida.
- para criar entidade é bom usar do blocoConstrutor para configurar default alguns campos.
- 
- crie metodo para criar novos filhos.
- quiser metodo no prototype só adicionar metodos na classe ja vao automatico para o proto dos objs filhos.  
*/
-----
debbuger:
Uma das melhores formas de aprender é debugando o código. 
Dá um crtl + shift + i no seu browser e verifica qual erro esta dando no console.
Depois vai source e coloca um breakpoint no código em questão e verifica o que ele retornando para corrigir o erro.
---

