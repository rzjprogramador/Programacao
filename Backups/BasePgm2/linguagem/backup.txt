/*
type Linguagem struct{
	Nome string
	EntradaSaidaDadosByLinguagem
	TiposDeDados
	
	Regras
	Arquivos
	ComandosDeSaida
	Variaveis
	Descobertas
}

type EntradaSaidaDadosByLinguagem struct{
	TemEscopoDeEntradaESaidaPrincipal bool
	QualEscopoDeEntradaESaidaPrincipal string
}

type TiposDeDados struct {
	Conceito string
	TipoPrimitivo
	TipoParaModeladores
	TipoParaVariaveis
	TipoParaAtributo
	TipoParaFuncao
	NovoTipoPersonalizado
}







type TipoPrimitivo struct {
	Boleano ModelTipo
	Texto ModelTipoTexto
	CaractereUnico ModelTipo
	Numeros
	Erro ModelTipo
	AnyQualquerInterface ModelTipo
	Vazio_Void ModelTipo
	Nulo ModelTipo
	Objeto ModelTipo 
}
 

type ModelUniversal_ModoPersonalizadoDaLinguagem struct{
	ModoUniversal Modos
	ModoPersonalizadoDaLinguagem Modos
}

type Modos struct {
	Conceito string
	Exemplo string
}



// Props Fixas





// LINGUAGEM DART
var LinguagemDart = Linguagem{
	Nome: "Dart",
	TemEscopoDeEntradaESaidaPrincipal: true,
	QualEscopoDeEntradaESaidaPrincipal: `funcao main ex: void main() {}`,
	Regras: Regras{
		ObrigatorioPontoeVirgulaACadaSentenca: true,
	},

	ComandosDeSaida: ComandosDeSaida{
		ViaConsole: `funcao print() ex: print( oQueDesejaMostrar )`,
	},
	
	Arquivos: Arquivos{
		RodarArquivo: `dart <NOME_OU_ENDERECO/ARQUIVO.EXTENSAO>`,
	},
	Variaveis: Variaveis{
		PropsConceitoVariavel: PropsConceitoVariavel{
			Significado: SignificadoVariavel,
			Sinonimos: SinonimosVariavel,
		},
		DeclaracaoVariavel: `<tipo> <nome> = <valor> ex: String nome = "Reinaldo"`,
		AspasAceitasEmString: "dupla",
		AspasAceitasEmCaractereUnico: "simples",
	},


	TiposDeDados: TiposDeDados{
		TipoPrimitivo{
			Boleano: ModelTipo{
				Keyword: "bool",
				Representacao_PodeInstanciar: "true ou false",
				Conceito: "#TODO",
				ValorDefault_SeNadaForPassado: "false",
				Exemplo: "``` bool verdadeira = true```",
			},

			Texto: ModelTipoTexto{
				Keyword: "String",
				Representacao_PodeInstanciar: "textos dentro de obrigatorias aspas duplas",
				ValorDefault_SeNadaForPassado: `nulo :: null obs: no tipo da variavel tem que inserir '?' para aceitar nada ser passado ela ser opcional.`,
				Exemplo: `String texto = "meu texto"`,	

				RepresentacoesTexto: RepresentacaoTexto{
					PularLinhas: ModelUniversal_ModoPersonalizadoDaLinguagem{
						ModoUniversal: PularLinhaModoUniversal,
						ModoPersonalizadoDaLinguagem: Modos{
							Conceito: `cada string dentro de aspas, nao precisa  de + para concatenar linhas `,
							Exemplo: `ex: String pularLinhaEmDart = "linha1 \n" "linha2 \n" "linha3 \n";`,
						},
					}, // PularLinhas

					Interpolar_Variavel_Em_Texto: ModelUniversal_ModoPersonalizadoDaLinguagem{
						ModoUniversal: Interpolar_Variavel_Em_Texto_Universal,
						ModoPersonalizadoDaLinguagem: Modos{
							Conceito: `dentro da string insere o cifrao_seguido da variavelAlvo ex: $variavel`,
							Exemplo: `String Interpolar_Variavel_Em_Texto_Dart = "O valor é $varFoo";`,
						},
					}, // Interpolar_Variavel_Em_texto

					Interpolar_ObjetoFuncao_Em_Texto: ModelUniversal_ModoPersonalizadoDaLinguagem{
						ModoUniversal: Interpolar_ObjetoFuncao_Em_Texto_Universal,
						ModoPersonalizadoDaLinguagem: Modos{
							Conceito: `dentro da string insira o cifrao seguido de chave e dentro o objeto`,
							Exemplo: `String Interpolar_ObjetoFuncao_Em_Texto_Dart = "o valor do objeto é >> ${objFoo}";`, 
						},
					}, // Interpolar_ObjetoFuncao_Em_Texto

					Caracteres_Especiais: Caracteres_Especiais_Universal,

					EscaparCaracteresEspeciaisEDeConflito: ModelUniversal_ModoPersonalizadoDaLinguagem{
						ModoUniversal: EscaparCaracteresEspeciaisEDeConflito_Universal,
						ModoPersonalizadoDaLinguagem: Modos{
							Conceito: `#TODO`,
							Exemplo: `#TODO`,
						},
					} , // EscaparCaracteresEspeciaisEDeConflito
				}, // Linguagem 
			}, // texto // // TODO >> CONTINUAR TIPOS:

		}, // Primitivo
	}, // TIPOS DE DADOS

} // INICIO - FINAL >> Linguagem

ANOTACOES TODO

***************************************************
TIPO OBJETO EM DART:
CriarNOvo: 
Conceito: criar separadamente variaveis para cada campo, tipar na variavel que vai representa-lo tipar como Object e atribuir as variaveis criadas a cada campo.
Exemplo: `
var nome = 'rei';
  var numero = 10;
  Object objFoo = {nome, numero};
	`,
***************************************************

*/

